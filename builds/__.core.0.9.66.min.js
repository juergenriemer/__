// ==ClosureCompiler==
// @compilation_level ADVANCED_OPTIMIZATIONS
// @output_file_name __.async.min.js
// @js_externs var __; __.Async; __.Async.ix; __.Async.store; __.Async.fnerr; __.Async.fnstat; __.Async.stub; __.Async.resolve; __.Async.reject; __.Async.Promise; __.Async.Promise.debug; __.Async.Promise.clear; __.Async.Promise.wait; __.Async.Promise.then; __.Async.Promise.start; __.Async.Promise.resolve; __.Async.Promise.stop; __.Async.Promise.reject; __.Async.Promise.ctx; __.Async.Promise.fnerr; __.Async.Promise.fnstat; __.Async.Promise._next; __.Async.promise; __.Async.Promise.__guid_async__; __.Async.__guid_async__; __.Async.Promise._args;
// ==/ClosureCompiler==
/**
 * @namespace __
 */

if( typeof __ == "undefined" ) {
	__ = {};
}

/**
 * <pre>
 * __.Async handles asynchronous calls in JavaScript.
 * </pre>
 * @memberof __
 * @class __.Async
 * @property {Object}  ctx - Default parent object of tasks; defaults to "window"
 * @property {String}  id - Name of the asynchronous task stack; used for debugging
 * @property {String}  [sdftError] - default message shown to the user in case of a rejection
 * @property {Function}  [fnerr] - Custom function to be invoked in case of rejections
 * @property {Function}  [fnstat] - Custom function to be invoked on every finished task
 * @todo replace x1..xn paramters with more meaningful names e.g. ctx_or_cb
 * @example ( new __.Async() )
 * .then( __.SP.list, "create", { sList : "Dossier" } )
 * .start();
 * @example ( new __.Async( {
 * 	  id : "creating secure dossier"
 * 	, ctx : __.SP.list
 * 	, fnerr : function( sError ) {
 * 		alert( sError );
 * 	}
 * 	, fnstat : function( aInfo ) {
 * 		var sOutput = aInfo.sMsg;
 * 		sOutput += " (" + aInfo.ix + "/" + aInfo.c + ")";
 * 		alert( sOutput );
 * 	}
 * } ) )
 * .then( "create", { sList : "Dossier" } )
 * .start();
 */

// instaniates a new Async task chain
__.Async = function( args ) {
	// create a unique guid 
	var __guid_async__ = "Async" + ( ++__.Async.ix );
	// create arguments object if it does not exist
	var args = args || {};
	// attach the unique guid which travels through the task chain
	args.__guid_async__ = __guid_async__;
	// instantiate a task chain object (promise), adds it to the static
	// store and returns it.
	return __.Async.store[ __guid_async__ ] = new __.Async.Promise( args );
}
// increment used to create a unique async label
__.Async.ix = 0;
// holds all promise instances
__.Async.store = {};
// default error function invoked by rejections
__.Async.fnerr = function( a, b ) {
	console.log( "[error]", a, b );
}

__.Async.fnstat = function() {}

/**
 * Returns a promise object by its guid passed on as arguments object
 * If no guid is passed on it will create a new instance of Promise
 * @memberof __.Async
 * @method promise
 * @static
 * @param {Object} [args] arguments passed on as object 
 * @example function( args ) {
 *     var async = __.Async.promise( args );
 * }
 * @returns {Object} Promise instance for chaining
 */
__.Async.promise = function( args ) {
	// fetch the promise object from args.__guid_async__ 
	var oPromise = null;
	if( typeof args == "object" && args.__guid_async__ ) {
		oPromise = __.Async.store[ args.__guid_async__ ];
	}
	// or create a new Promise, i.e. we invoke an async task chain
	// as stand-alone
	else {
		oPromise = ( new __.Async() );
		// in case we pass on a callback we save it for later
		// invocation. We attach the callback to the promise
		// object with double underscores to prevent overriding
		if( args && args.cb ) {
			oPromise.__cb__ = args.cb;
		}
	}
	// we set the late arrivals flag on the promise, i.e. any newly
	// added task will get put at beginning of task queue
	oPromise.bLateArrivals = true;
	return oPromise;
}
// The constructor function of a task chain object (promise)
__.Async.Promise = function( args ) {
	// assign the guid from the arguments passed on, here we use a variable
	// name that is not likely to be overridden (wrapped in double low dashes)
	this.__guid_async__ = args.__guid_async__;
	this._sStatus = "idle";
	//this._args = args;
	this._args = { __guid_async__ : this.__guid_async__ };
	this._loTasks = [];
	this._bDebug = false;
	this.ctx = ( args && args.ctx ) ? args.ctx : window;
	this.id = ( args && args.id ) ? args.id : this.__guid_async__;
	this.sdftError = ( args && args.sdftError ) ? args.sdftError : "";
	this.fnerr = ( args && args.fnerr ) ? args.fnerr : __.Async.fnerr;
	this.fnstat = ( args && args.fnstat ) ? args.fnstat : __.Async.fnstat;
	return this;
};
__.Async.Promise.prototype = {
	  c : 0
	, ix : 0
	, bLateArrivals : false
	, debug : function() {
		this._bDebug = true;
		return this;
	}
	 /**
	 * clears the arguments chain of an Async stack
	 * @memberof __.Async
	 * @method clear
	 * @example async.clear()
	 * @instance
	 */
	, clear : function() {
		var that = this;
		var ofn = {
			  ctx : this.ctx
			, sfn : function() {
				that._args = { __guid_async__ : that.__guid_async__ };
				that.resolve();
			}
			, args : {}
		};
		this._add( ofn );
		return this;
			
	}
	 /**
	 * Pauses the execution of a task chain for given milliseconds.
	 * @memberof __.Async
	 * @method pause
	 * @example async.pause( 1000, "pause a second" )
	 * @param {Integer} ms milliseconds the execution should be paused
	 * @param {String} [sMsg] log message
	 * @returns {Object} Promise instance for chaining
	 * @instance
	 */
	, pause : function( ms, sMsg ) {
		var that = this;
		var ofn = {
			  ctx : this.ctx
			, sfn : function() {
				setTimeout( function() {
					 that.resolve();
				}, ms );
			}
			, args : {}
			, sMsg : sMsg || "pause"
		};
		this._add( ofn );
		return this;
	}
	 /**
	 * Pauses the execution of a task chain until a certain condition
	 * occurs. This condition is indicated as function that is polled
	 * every 25 milliseconds if not indicated otherwise.
	 * @memberof __.Async
	 * @method wait
	 * @example async.wait( function() {
	 *       return self.location.hash == "continue";
	 * }, 250, "wait for hash to signal go" )
	 * @example async.wait( function() {
	 *       return self.location.hash == "stop";
	 * } )
	 * @param {Function} fnCondition function to indicate the state of
	 * continuation by return true or false
	 * @param {Integer|String} [x1] Either interval in milliseconds to check the 
	 * condition or log message
	 * @param {String} [x2] log message
	 * @returns {Object} Promise instance for chaining
	 * @instance
	 */
	, wait : function( fnCondition, x1, x2 ) {
		var that = this;
		var msPoll = ( typeof x1 == "number" )
			? x1 : 25;
		var sMsg = ( typeof x1 == "string" )
			? x1
			: ( x2 ) ? x2 : "wait";
		var ofn = {
			  ctx : this.ctx
			, sfn : function() {
				var fnPoll = function() {
					if( fnCondition() ) {
						that.resolve();
					}
					else {
						setTimeout( fnPoll, msPoll );
					}
				};
				fnPoll();
			}
			, args : {}
			, sMsg : sMsg
		};
		this._add( ofn );
		return this;
	}
	/**
	 * Registers a method to the task chain.
	 * <br />
	 * We can either register an existing method by indicating
	 * its parent object and method name or we register an anonymous function.
	 * In the first case the method needs to be "promisable" and invoke eitherresolve or reject.  
	 * The latter
	 * we usually choose to operate on results of previous task and/or we want
	 * fork the task chain base on conditions.
	 * <br />
	 * For debugging or showing progress we can add an additional message.
	 * <br />
	 * In order to use arguments from previous tasks use "args"
	 * </pre>
	 * @memberof __.Async
	 * @method then
	 * @example
	 * // oUser = class intance of User
	 * ( new __.Async() )
	 * .then( oUser, "getRecords", { idUser : 123 }, "Getting records" )
	 * .then( function( args ) {
	 *     var async = __.Async.promise( args );
	 *     if( args.hResults ) {
	 *         __.dn_( "#output" ).innerHTML = args.hResult;
	 *     }
	 *     else {
	 *         async.then( oUser, "delete", { idUser : 123 } );
	 *     }
	 *     async.resolve();
	 * }, "Printing records or deleting user" )
	 * .start();
	 * @param {Object|Function} x1 Either an anonymous function or parent object of a method
	 * @param {String|String} [x2] Either string of method name or a logging message
	 * @param {String|String} [x3] Either arguments passed on as object or string or a logging message
	 * @param {String} [x4] logging message
	 * @returns {Object} Promise instance for chaining
	 * @instance
	 */
	// REF: unit test different argument structures
	, then : function( x1, x2, x3, x4 ) {
		// construct an action's object
		var ofn = {
			  ctx : ( typeof x1 == "object" ) ? x1 : this.ctx
			, sfn : ( typeof x1 == "object" ) ? x2 : x1
			, args : ( typeof x2 == "string" )
				? ( typeof x3 == "object" )
					? x3
					: {}
				: ( x2 )
					? x2
					: {}
			, sMsg : ( typeof x3 == "object" )
				? x4
				: ( typeof x3 == "string" )
					? x3
					: ( typeof x2 == "string" )
						? x2
						: ""
		};
		this._add( ofn );
		return this;
	}
	, _add : function( ofn ) {
		this.c++;
		ofn.__guid_async__ = this.__guid_async__;
		// We first check whether we are in late arrival mode, this
		// happens if another batch of tasks is assigned 
		if( this.bLateArrivals ) {
			// in which case we need to add new actions at the beginning
			// of the task queue but at the end of any such added actions
			// we end up with an array like this [ new1, new2, old3, old4 ]
			// so we have to mark the new action as "late arrival"
			// for subsequent late arrivals to position them below previous ones
			ofn.bLateArrival = true;
			// first we get number of task left in our task stack
			var c = this._loTasks.length;
			// if we still have tasks in our stack...
			if( c ) {
				// we iterate through the exising array
				for( var ix=0; ix<c; ix++ ) {
					// and inject the new action after the first 
					// action that is not a "late arrival" itself
					// or a 
					var bSet = false;
					if( ! this._loTasks[ ix ].bLateArrival ) {
						bSet = true;
						this._loTasks.splice( ix, 0, ofn );
						break;
					}
				}
				// so if we found only late arrivals
				if( ! bSet ) {
					// we simply push the new task to the end
					this._loTasks.push( ofn );
				}
			}
			// the task stack is empty!
			else {
				// we simply push the new task into the stack
				this._loTasks.push( ofn );
			}
		}
		else {
			// no "late arrival" a normal action to be added to the
			// end of the array holding all actions
			this._loTasks.push( ofn );
		}
	}
	, _stats : function( sMsg ) {
		// in case we have set a status call back on init or we are in debug mode
		var fn = this.fnstat;
		if( this._bDebug ) {
			fn = function( a ) {
				console.log( a.__guid_async__ + " (" + a.ix + "/" + a.c + ") -> " + a.sMsg );
			};
		}
		if( fn ) {
			// ... we invoke it with possible message and
			// information on progress
			fn( {
				  __guid_async__ : this.__guid_async__
				, sMsg : sMsg || ""
				, c : this.c
				, ix : this.ix
				, pct : this.ix * 100 / this.c
			} );
		}
	}
	, _next : function() {
		// cut next function object from list
		var ofn = this._loTasks.shift();
		// save the current action message
		this.scurMsg = ofn.sMsg;
		// increase action count
		this.ix++;
		// invoke status method
		this._stats( ofn.sMsg );
		// add passed on arguments to args object
		for( var s in ofn.args ) {
			// get value
			var v = ofn.args[ s ];
			// if we deal with an arguments lookup we
			// fetch the value using the key/path string
			// console.log( v );
			if( typeof v == "object" && v && v.arg ) {
				var lk = v.arg.split( "." );
				v = this._args;
				lk.forEach( function( k ) {
					v = v[ k ];
				} );
			}
			// assign to arg chain
			this._args[ s ] = v;
		} 
		// we now invoke the function.
		if( typeof ofn.sfn == "string" ) {
			// in case its name is passed on as string
			// we invoke as key from context object passing
			// on our accumulated arguments object
			ofn.ctx[ ofn.sfn ]( this._args );
		}
		else {
			// in case we passed on an anonymous function
			// we invoke via "call" with context object again
			// passing on our accumulated arguments object
			ofn.sfn.call( ofn.ctx, this._args );
		}
	}
	/**
	 * <pre>
	 * Starts an asynchronous task chain
	 * </pre>
	 * @memberof __.Async
	 * @method start
	 * @example
	 * async.start();
	 * @returns {Object} Promise instance for chaining
	 * @instance
	 */
	, start : function() {
		// we start action chain by setting status to pending
		this._sStatus = "pending";
		// triggering the first action
		this._next();
		// and returning this object for possible further chaining
		return this;
	}
	/**
	 * <pre>
	 * Resolves a task that has been successfully execucted. Results can
	 * be passed on as object which adds them to the arguments object for
	 * the current task chain.
	 * </pre>
	 * @memberof __.Async
	 * @method resolve
	 * @example
	 * async.resolve();
	 * @example
	 * async.resolve( { sList : "Test list" } );
	 * @param {Object} args Arguments passed on as object
	 * @instance
	 */
	, resolve : function( args ) {
		// first we clear any bLateArrivals flag
		this.bLateArrivals = false;
		// next we remove all late arrival flags from tasks
		this._loTasks.forEach( function( ofn ) {
			ofn.bLateArrival = false;
		} );
		// add returned results to args object
		for( var s in args ) {
			this._args[ s ] = args[ s ];
		} 
		// invoke next action if array is not empty
		if( this._loTasks.length > 0 ) {
			this._next();
		}
		else {
			// otherwise stop and set status to idle
			this._sStatus = "idle";
			this._cleanUp();
			// in case of a forced callback (happens if we
			// indicate "cb" in a standalone call we invoke it
			if( this.__cb__ ) {
				this.__cb__( args );
			}
		}
	}
	/**
	 * <pre>
	 * Stops the execution of the current task chain.
	 * </pre>
	 * @memberof __.Async
	 * @method stop
	 * @example
	 * async.stop()
	 * @instance
	 */
	, stop : function() {
		this._cleanUp();
	}
	/**
	 * <pre>
	 * Rejects a task that errored out in execution. An error message can
	 * be passed on which adds to the error object that is 
	 * created compiling all relevant error information. The error object
	 * is passed on to the default or custom error function.
	 * </pre>
	 * @memberof __.Async
	 * @method reject
	 * @example
	 * async.reject( "Could not save item to the list" );
	 * @param {String|Object} [sError] String or object describing the 
	 * error condition 
	 * @instance
	 */
	, reject : function( sError ) {
		var stringify = function( s ) {
			try {
				return ( s ) ? JSON.stringify( s ) : "na";
			}
			catch( e ) {
				return "could not stringify";
			}
		};
		// we do not clean up to be able to inspect the stack
		// but we set the status to erroneous
		this._sStatus = "error";
		// an error happened, we stop here 
		var sError = ( typeof sError == "string" )
			? sError
			: ( typeof sError ==  "object" )
				? ( sError.sError )
					? sError.sError
					: "A task was rejected"
				: "A task was rejected";
		var sStack = "id:(" + this.id + ") ";
		sStack += "task:(" + this.scurMsg + ") ";
		sStack += "args:(" + stringify( this._args ) + ") ";
		sStack += "sdftError:(" + this.sdftError + ") ";
		sStack += "sError:(" + stringify( sError ) + ") ";
		var oStack = {
			  ix : this.ix
			, sError : sError
			, id : this.id
			, sErrorTask : this.scurMsg
			, args : this._args
			, sdftError : this.sdftError
			, sError : sError
			, sStack : sStack
		};
		// and invoke the error function with error and args object
		if( this.fnerr ) {
			this.fnerr( oStack );
		}
	}
	, _cleanUp : function() {
		if( ! this._bDebug ) {
			delete __.Async.store[ this.__guid_async__ ];
		}
	}
}


// ==ClosureCompiler==
// @compilation_level ADVANCED_OPTIMIZATIONS
// @output_file_name __.class.min.js
// @jscomp_off es5Strict
// @js_externs var __; __.Class; __.Class.instantiate; __.Class.extend; __.Class.mixin; __.Class._super;
// ==/ClosureCompiler==

/**
 * @namespace __
 */
if( typeof __ == "undefined" ) {
	__ = {};
}

/**
 * @namespace __.Class
 * @memberof __
 */
__.Class = function() {};
__.Class.prototype.construct = function() {};

/**
 * Creates a new class by extending from the base class (__.Class) or
 * inheriting from an existing class.<br>
 * If the class has a method called "init" it will invoke it on creation of an instace.<br>
 * In case of inheritance you can call a parent's method by using the "_super" method.<br>
 * Static attributes and methods are created by appending to the class constructor function.
 * @memberof __.Class
 * @method extend
 * @example // a base class
 * var Person = __.Class.extend( {
 *      sName : null
 *    , init : function( args ) {
 *         this.sName = args.sName;
 *         Person.cPerson++;
 *    }
 *    , say : function() {
 *       return "My name is " + this.sName;
 *    }
 * } );
 * // static attribute
 * Person.cPerson = 0
 * // static function
 * Person.report = function() {
 *     return Person.cPerson + " person(s) created";
 * }
 * var tom = __.Class.instantiate( Person, { sName : "Tom" } );
 * tom.say(); // "My name is Tom"
 * Person.report(); // "1 person(s) created"
 * @example // an extended class
 * var Soldier = Person.extend( {
 *    salute : function() {
 *       return this.say() + ", Sir";
 *    }
 * } );
 * var tom = __.Class.instantiate( Soldier, { sName : "Major Tom" } );
 * tom.salute(); // "My name is Major Tom, Sir"
 * Person.report(); // "2 person(s) created"
 * @returns {Object} class object to chain loading of mixins
 */
__.Class.extend = function( o ) {
	var that = this;
	var oNew = function() {
		if (arguments[ 0 ] !== __.Class) {
			// call constructor if not base 
			this.construct.apply( this, arguments ); 
		}
	};
	// get prototype and hook to parent
	var oPrototype = new this( __.Class );
	// save link to parent's prototype
	var oParent = this.prototype;
	for (var sMember in o) {
		var oMember = o[sMember];
		if (oMember instanceof Function) {
			oMember.oParent = oParent;
			// in case we override add method
			// _super() to call parent's function
			/**
			 * Provides a hook into the parent's object to call the overridden (super) method.<br />
			 * NB: Since we use callee/caller this will not work in xtrict mode.
			 * @memberof __.Class
			 * @method _super
			 * @instance
			 * @param {String} [sMethod] Name of the parent method
			 * @example
			 * var Person = __.Class.extend( {
			 *    say : function() {
			 *       return "Hi";
			 *    }
			 * } );
			 * var Player = Person.extend( {
			 *    say : function() {
			 *       return this._super( "say" ) + ", Teammate";
			 *    }
			 * } );
			 * var player = __.Class.instantiate( Player );
			 * player.say(); // "Hi, Teammate"
			 */
			oPrototype.oParent = oParent;
			oPrototype._super= function( sMethod ) {
				var oCaller = arguments.callee.caller;
				// method context == this
				var ctx = this;
				// methods arguments == arguments
				var args = oCaller.arguments;
				return args.callee.oParent[ sMethod ].apply( ctx, args )
			};
		}
		// augment with members
		oPrototype[ sMember ] = oMember;
	}
	// set the prototype
	oNew.prototype = oPrototype;
	// set method for mixins
	/**
	 * Mixes in additional behaviour to the class. It expects plain objects in the
	 * arguments (Other class objects cannot be mixed in).
	 * Mixin object members will not overwrite class members in case of same
	 * method or attribute names.
	 * @memberof __.Class
	 * @method mixin
	 * @param {Object} objects Any number of objects to be mixed in.
	 * @example
	 * var Minecraft = {
         *       say : function() {
	 *         return "Mojang";
	 *     }
	 *     , craft : function() {
	 *         return "wooden sword";
	 *     }
	 * };
	 * var Ingress = {
         *       say : function() {
	 *         return "Ingress";
	 *     }
	 *     , capture : function() {
	 *         return "portal green";
	 *     }
	 * };
	 * var Player = __.Class.extend( {
	 *     say : function() {
	 *        return "Hi";
	 *     }
	 * }).mixin( Minecraft, Ingress );
	 * var player = __.Class.instantiate( Player );
	 * player.say(); // Hi
	 * player.craft(); // wooden sword
	 * player.capture(); // portal green
	 */
	oNew.mixin = function() {
		var loMixins = [].slice.call( arguments );
		loMixins.forEach( function( oMixin ) {
			for( var sMember in oMixin ) {
				if( ! oPrototype[ sMember ] ) {
					oPrototype[ sMember ] = oMixin[ sMember ];
				} 
			}	
		} );	
		return this;
	}
	// make it extendable
	oNew.extend = this.extend;
	// and return it
	return oNew;
};

/**
 * Creates a new instance of a class.
 * @memberof __.Class
 * @method instantiate
 * @example Person = __.Class.extend( {
 *      sName : null
 *    , init : function( args ) {
 *       this.sName = args.sName;
 * }
 *    , say : function() {
 *       return "Hi, I am " + this.sName;
 *    }
 * } );
 * tim = __.Class.instantiate( Person, { sName : "Tim" } );
 * tim.say(); // Hi, I am Tim
 * @returns {Object} instance of a class object
 */
__.Class.instantiate = function() {
	// create new instance
	var oClass = arguments[0];
	var args = arguments[1];
	var oInstance = new oClass( args );
	// call init function if exists
	if( oInstance.init ) {
		oInstance.init( args );
	}
	return oInstance;
};

Object.defineProperty(Array.prototype,"__each",{value:function(a){for(var b=this.length,c=0;c<b;c++)a(this[c])}});
Object.defineProperty(Node.prototype,"__find",{value:function(a,b){var c="BODY"==this.tagName.toUpperCase()?document:this,d="querySelectorAll";if(/^.[a-zA-Z0-9_-]*$/.test(a)){var e=a.substr(0,1);"#"==e?(d="getElementById",a=a.substr(1)):"."==e?(d="getElementsByClassName",a=a.substr(1)):/[a-zA-Z]/.test(e)&&(d="getElementsByTagName")}if(c=c[d](a))if(c=Element.prototype.isPrototypeOf(c)?c:[].slice.call(c),b&&__.dn.each(c,b),d=c.length,!isNaN(d)){if(1==d)return c[0];if(0==d)return null}return c}});
Object.defineProperty(Node.prototype,"__remove",{value:function(){this.parentNode.removeChild(this)}});Object.defineProperty(Node.prototype,"__closest",{value:function(a,b){var c=this.closest(a);b&&__.dn.each(c,b);return c}});Object.defineProperty(Node.prototype,"__append",{value:function(a,b){return __.dn.a(a,this,b,"move")}});Object.defineProperty(Node.prototype,"__prepend",{value:function(a,b){return this.firstChild?__.dn.a(a,this.firstChild,b,"_move"):__.dn.a(a,this,b,"move")}});
Object.defineProperty(Node.prototype,"__before",{value:function(a,b){return __.dn.a(a,this,b,"_move")}});Object.defineProperty(Node.prototype,"__after",{value:function(a,b){return __.dn.a(a,this,b,"move_")}});Object.defineProperty(Node.prototype,"__show",{value:function(){var a=this.hasAttribute("__.display")?this.getAttribute("__.display"):"block";this.style.display=a}});
Object.defineProperty(Node.prototype,"__hide",{value:function(){"none"!=this.style.display&&(this.setAttribute("__.display",getComputedStyle(this).display),this.style.display="none")}});Object.defineProperty(Node.prototype,"__h",{value:function(a){this.innerHTML=a}});Object.defineProperty(Node.prototype,"__ix",{value:function(){for(var a=0,b=this;null!=(b=b.previousElementSibling);)a++;return a}});
Object.defineProperty(Node.prototype,"__x",{value:function(a){if(a)/absolute|fixed/.test(self.getComputedStyle(this).position)||(this.style.position="absolute"),this.style.left=parseInt(a)+"px";else return this.getBoundingClientRect().left}});Object.defineProperty(Node.prototype,"__y",{value:function(a){if(a)/absolute|fixed/.test(self.getComputedStyle(this).position)||(this.style.position="absolute"),this.style.top=parseInt(a)+"px";else return this.getBoundingClientRect().top}});
Object.defineProperty(Node.prototype,"__dx",{value:function(a){if(a)this.style.width=parseInt(a)+"px";else return this.getBoundingClientRect().width}});Object.defineProperty(Node.prototype,"__dy",{value:function(a){if(a)this.style.height=parseInt(a)+"px";else return this.getBoundingClientRect().height}});
Object.defineProperty(Node.prototype,"__fadeOut",{value:function(a,b){var c=this;a="number"==typeof a?a:250;b="function"==typeof b?a:b;var d=25/a;c.style.opacity=c.style.opacity||1;(function f(){0>(c.style.opacity-=d)?(c.__hide(),b&&b()):setTimeout(f,25)})()}});
Object.defineProperty(Node.prototype,"__fadeIn",{value:function(a,b){var c=this;a="number"==typeof a?a:250;b="function"==typeof b?a:b;var d=25/a;c.style.opacity=this.style.opacity||0;c.__show();(function f(){var a=Number(c.style.opacity)+d;c.style.opacity=a;1<a?(c.style.opacity=1,b&&b()):setTimeout(f,25)})()}});Object.defineProperty(Node.prototype,"__style",{value:function(a,b){if(!b)return self.getComputedStyle(this)[a];this.style[a]=b}});
Object.defineProperty(Node.prototype,"__scrollTo",{value:function(a,b){switch(a){case "x":this.scrollLeft=b;break;case "y":this.scrollTop=b;break;case "bottom":this.scrollTop=this.scrollHeight;break;case "top":this.scrollTop=0;break;case "left":this.scrollLeft=0;break;case "right":this.scrollLeft=this.scrollWidth}}});
Object.defineProperty(Node.prototype,"__onScroll",{value:function(a,b){b=b||300;this.__cbScroll=function(){var c=this==document?document.body:this;c.b&&clearInterval(c.b);c.b=setTimeout(function(){var b=c.scrollHeight,e=c.scrollTop,f=c.clientHeight,g=c.scrollWidth,h=c.scrollLeft,k=c.clientWidth;a({x:b,y:g,dy:k,dx:f,bTop:0==e,bBottom:b==e+f,bLeft:0==h,bRight:g==h+k})},b)};this.addEventListener("scroll",this.__cbScroll)}});
Object.defineProperty(Node.prototype,"__offScroll",{value:function(){this.removeEventListener("scroll",this.c);this.c=null}});"undefined"==typeof __&&(__={});
__.dn={each:function(a,b){if(a)for(var c=isNaN(a.length)?[a]:a,d=c.length,e=0;e<d;e++)b(c[e],e)},f:function(a,b){b=b.toString()||"";var c=document.createElement("div");c.appendChild(document.createTextNode(b));a.innerHTML=c.innerHTML},_move:function(a,b){a instanceof Array?__.dn.each(a,function(a){b.parentNode.insertBefore(a,b)}):b.parentNode.insertBefore(a,b)},move:function(a,b){a instanceof Array?__.dn.each(a,function(a){b.appendChild(a)}):b.appendChild(a)},move_:function(a,b){a instanceof Array?
__.dn.each(a,function(a){b.parentNode.insertBefore(a,b.nextSibling);b=a}):b.parentNode.insertBefore(a,b.nextSibling)},a:function(a,b,c,d){var e="object"==typeof b?b:document.body;b="function"==typeof b?b:c;var f=document.createElement("div");"string"==typeof a?f.innerHTML=a:a.length?__.dn.each(a,function(a){f.appendChild(a)}):f.appendChild(a);a=[].slice.call(f.children);a=a instanceof Array&&1==a.length?a[0]:a;b&&__.dn.each(a,b);__.dn[d](a,e);return a}};
this.Element&&function(a){a.matches=a.matches||a.matchesSelector||a.webkitMatchesSelector||a.msMatchesSelector||function(a){a=(this.parentNode||this.document).querySelectorAll(a);for(var b=-1;a[++b]&&a[b]!=this;);return a[b]?!0:!1}}(Element.prototype);this.Element&&function(a){a.closest=a.closest||function(a){for(var b=this;b.matches&&!b.matches(a);)b=b.parentNode;return b.matches?b:null}}(Element.prototype);window.__find=function(a,b){return document.body.__find(a,b)};
window.__append=function(a,b){return document.body.__append(a,b)};window.__prepend=function(a,b){return document.body.__prepend(a,b)};window.__style=function(a,b){return document.body.__style(a,b)};window.__scrollTo=function(a,b){document.body.__scrollTo(a,b)};window.__onScroll=function(a,b){document.body.__onScroll(a,b)};window.__offScroll=function(){document.body.__offScroll()};
window.__css=function(a){var b=document.createElement("style");document.getElementsByTagName("head")[0].appendChild(b);b.innerHTML=a};
"undefined"==typeof __&&(__={});__.Event={a:{},b:function(a){var c=[];a.split(" ").forEach(function(a){a&&c.push(a.substr(0,1).toUpperCase()+a.substr(1))});return"on"+c.join("")},listen:function(){var a=this,c=Array.prototype.slice.call(arguments),d=c.shift();c.forEach(function(b){b=a.b(b);a.a[b]||(a.a[b]=[]);a.a[b].push(d)})},trigger:function(a,c){a=this.b(a);var d=this.a[a];d&&d.forEach(function(b){if("function"==typeof b[a])b[a](c);else console.warn("listener has no trigger receiver: "+a)})}};
"undefined"==typeof __&&(__={});Object.defineProperty(String.prototype,"__toJson",{value:function(){try{return JSON.parse(this)}catch(a){return null}}});Object.defineProperty(String.prototype,"__isEmpty",{value:function(){return""===this.trim()}});Object.defineProperty(String.prototype,"__toCamelCase",{value:function(){var a=[];this.split(" ").forEach(function(b){b&&a.push(b.substr(0,1).toUpperCase()+b.substr(1))});return a.join(" ")}});
Object.defineProperty(String.prototype,"__unCamelCase",{value:function(){s=this.replace(/([A-Z])([a-z])/g," $1$2");s=s.replace(/([a-z])([A-Z])/g,"$1 $2");return s.trim()}});Object.defineProperty(String.prototype,"__tokenize",{value:function(a){var b=this;return a&&"simple"!=a?b:(b=b.replace(/\s/g,""),b=b.replace(/'/g,""),b=b.replace(/"/g,""),b.toLowerCase())}});Object.defineProperty(String.prototype,"__isEmail",{value:function(){return/^[a-zA-Z0-9._-]+@[a-zA-Z0-9.-]+[\.]{1}[a-zA-Z]{2,4}$/.test(this)}});
Object.defineProperty(String.prototype,"__isUrl",{value:function(){return/^(http|https):\/\/(www\.)?[-a-zA-Z0-9@:%._\+~#=]{2,256}\.[a-z]{2,6}\b([-a-zA-Z0-9@:%_\+.~#?&//=]*)/.test(this)}});Object.defineProperty(Object.prototype,"__toString",{value:function(){try{return JSON.stringify(this)}catch(a){return null}}});
Object.defineProperty(Object.prototype,"__struc",{value:function(){function a(a,b){var c=a&&a.sort?a.sort():a,e=b&&b.sort?b.sort():b;return c>e}function b(c,e){for(var d in c)if(c[d]&&c[d].sort&&c[d].sort(a).sort(),c.hasOwnProperty(d)){var f=e?".":"";g.push(e+f+d);"object"==typeof c[d]&&b(c[d],e+f+d)}}var c=this.__toString(),f=c.length;(c=c.__toJson())&&c.sort&&c.sort(a).sort();var g=[];b(c,"");return{c:c,a:f,f:g.sort()}}});Object.defineProperty(Object.prototype,"__equal",{value:function(a){return this.__compareTo(a).isEqual}});
Object.defineProperty(Object.prototype,"__compareTo",{value:function(a){var b=!0,c=[],f=this.__struc(),g=a.__struc();f.a!==g.a&&(c.push(["length",,f.a,g.a]),b=!1);f.f.forEach(function(a){for(var e=f.c,d=g.c,k=a.split("."),h=0;h<k.length;h++)if(e=e?e[k[h]]:e,d=d?d[k[h]]:d,typeof e!==typeof d){c.push(["type",a,e,d]);b=!1;break}else if("undefined"===typeof d){c.push(["miss",a,e,d]);b=!1;break}else e instanceof Date||e instanceof Function?(e=e.toString().replace(/\s/g,""),d=d.toString().replace(/\s/g,
"")):"object"!==typeof e&&e!==d&&(b=!1,c.push(["diff",a,e,d]))});return{isEqual:b,b:c}}});Object.defineProperty(Object.prototype,"__diff",{value:function(a){var b=this.__compareTo(a);if(b.isEqual)return null;a=a.__compareTo(this);return{o1:b.b,o2:a.b}}});Object.defineProperty(Object.prototype,"__getKey",{value:function(){for(var a in this)return a;return null}});
Object.defineProperty(Object.prototype,"__getKeys",{value:function(){if(Object&&Object.keys)return Object.keys(this);var a=[],b;for(b in this)a.push(b);return a}});Object.defineProperty(Object.prototype,"__add",{value:function(a){if(a)for(var b in a)this[b]=a[b]}});Object.defineProperty(Object.prototype,"__kRename",{value:function(a,b){Object.defineProperty(this,b,Object.getOwnPropertyDescriptor(this,a));delete this[a]}});
Object.defineProperty(Object.prototype,"__kCount",{value:function(){var a=0,b;for(b in this)this.hasOwnProperty(b)&&++a;return a}});Object.defineProperty(Object.prototype,"__copy",{value:function(){try{return JSON.parse(JSON.stringify(this))}catch(a){return null}}});Object.defineProperty(Object.prototype,"__isEmpty",{value:function(){for(var a in this)return!1;return!0}});Object.defineProperty(Number.prototype,"__withinBoundary",{value:function(a,b){var c=this;c=c<a?a:c;return c>b?b:c}});
Object.defineProperty(String.prototype,"__sanitize",{value:function(){us_h=this.toString()||"";var a=document.createElement("div");a.appendChild(document.createTextNode(us_h));return a.innerHTML}});Object.defineProperty(Array.prototype,"__remove",{value:function(a){var b=this.indexOf(a);-1<b&&(this.splice(b,1),this.__remove(a))}});Object.defineProperty(Array.prototype,"__contains",{value:function(a){return-1<this.indexOf(a)}});
Object.defineProperty(Array.prototype,"__empty",{value:function(){return 0==this.length}});Object.defineProperty(Array.prototype,"__kSort",{value:function(a){return this.sort(function(b,c){return b.hasOwnProperty(a)&&"undefined"!=typeof b[a]?!c.hasOwnProperty(a)||"undefined"==typeof c[a]||b[a]<c[a]?-1:b[a]>c[a]?1:0:1})}});__.e={stop:function(a){a.stopPropagation();a.preventDefault()}};__.css=function(a){var b=document.createElement("style");document.body.appendChild(b);b.innerHTML=a};
__.cookie={get:function(a){return(a=document.cookie.match("(^|;) ?"+a+"=([^;]*)(;|$)"))?a[2]:null},set:function(a,b,c){var f=new Date;f.setTime(f.getTime()+864E5*c);document.cookie=a+"="+b+";path=/;expires="+f.toGMTString()},remove:function(a){__.cookie.set(a,"",-1)}};__.url={oParams:function(a){var b={};(a?a:window.location.href).replace(/[?&]+([^=&]+)=([^&]*)/gi,function(a,f,g){b[f]=g});return b}};__.utils={};
__.utils.dt={date:function(a){a=a?new Date(a.replace(/\D/g,"-")):new Date;var b="Sunday Monday Tuesday Wednesday Thursday Friday Saturday".split(" ")[a.getDay()],c=a.getMonth(),f="January February March April May June July August September October November December".split(" ")[c];return{nDay:a.getDate(),sDay:b,sDayShort:b.substring(0,3),nMonth:c,sMonth:f,sMonthShort:f.substring(0,3)}}};
__.utils.misc={isIE:function(){return"Microsoft Internet Explorer"==navigator.appName?!0:"Netscape"==navigator.appName?-1<navigator.appVersion.indexOf("Edge"):!1}};
